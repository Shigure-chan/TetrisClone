5/13/19
-gamestate.py
 -added following attributes to GameState Class:
  -existing_blocks
   -is a list of all block objects that have existed...
   -implemented so previous blocks wouldn't be overwritten...
 -modified gravity method to incorporate freezing and landing mechanics
-tetrimino.py
 -added following attributes to the Tetrimino:
  -frozen - activates a tick after landing (only works with bottom for now)
  -landed - activates upon landing (only works with the bottom for now)

Things to add:
 -implementing rotation
 -modifying the movement such that the current tetrimino doesn't occupy 
  an space already occupied by an existing block...

All changes made by Kevin Huang

=======================================================================================

5/10/19
-gamestate.py
 -added the following methods in GameState class:
  -move_right()
   -moves each block in an Tetrimino object 1 column right
  -move_left()
   -moves each block in a Tetrimion object 1 column left
  -gravity()
   -moves each block in an Tetrimino object 1 row down...
  -board_update()
   -updates board by wiping every index that the current Tetrimino object
    isn't in (this must be changed...)

  -updated the following methods in GameState class:
   -spawn()
    -does not update board anymore, all it does is initialize
     the block attribute to an Tetrimino object.
 
 -created a if __name__ == '__main__' block for testing purposes...

Things to add:
-board_update must be modified such that it doesn't "destroy" an existing block 
 when a new block is added
-implementing rotation
-modifying the movement such that the current tetrimino doesn't occupy 
 an space already occupied by an existing block...

All changes made by Kevin Huang

===========================================================================================
5/8/2019
-tetrimino.py
 -added the following methods to Tetrimino class:
  o_block() - creates coordinates and reinitializes block(1-4) attributes
              to those coordinates
  i_block() 
  t_block()
  l_block()
  j_block()
  s_block()
  z_block()
  spawn() - checks block type before using the methods above to reinitialize 
            block1, block2, block3, block4 attributes to coordinates

-gamestate.py
 -added to the following methods in GameState class:
  -printout()
   -now returns a string representation of the board using a nested list comprehension
  -spawn()
   -now mutates the list stored in the board attribute with a newly spawned block...
 
Things to add:
-Adding a unittest module 
-Perhaps make the spawn method in GameState some sort of general update method
 -for example, mutating the GameState's board attribute based on the 
  current values of the Tetromino's block1, block2 attributes 
-Implementing side-to-side movement
-Implementing gravity
-Maybe rotation

All changes made by Kevin Huang

===============================================================================================
5/7/2019
-added helper.py
 -created copyright()
  this quickly prints copyright info

-added gamestate.py
 -created GameState class
 -GameState currently has one attribute: 
  board (the array storing the state of the game field)
 -printout method
  currently prints board directly to console
 -board config
  allows changing of amount of rows or columns without 
  changing global constants ROWS or COLUMNS

-added tetrimino.py
 -created Tetrinimo class
 
Things to add:
-Some way of handling the position of a tetrimino...
-Putting a tetrimino inside the board...
-Changing printout so it returns a string which can be checked by unit testing
-Adding a unit test module to handle basic spawning

All changes made by Kevin Huang


