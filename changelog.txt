To-do
-now to start working on it within either pygame or arcade libraries...

-scoring
 -relies on level...

-end rewards should be triggered upon above average score or difficult level
 -should have congratulatory message and special graphic effects

-high score table should be triggered upon a high score, level, or time
 -name, level, score, goal attained, number of lines cleared
 -score data should be retained and accessible via main menu...
==================================================================================================================
9/21/19
interface.py now has a functioning title screen

-Game class inherits from Arcade's Window class
-there are "flag" attributes which dictate whether certain things need to be highlighted or which 
 "screen" to show the player: menu, high score, options, etc.
-the player can quit the game and go to the "game" which is currently a blank screen
-there are three functions and one helper that help the game figure out when a cursor is inside
 the buttons... and when each button is clicked...

=======================================================================================================================================================
8/25/19
-revamped the following methods in gamestate.py
 -hold(self)
  -changed it to the behavior described below
  -before... when you held a block, a block would go in the hold queue
   -it would automatically spawn as the next block 
   -maybe I should re-implement this behavior as a mode you can select or something of that nature...
   
-added new method
 -print_next_block(self)
  -returns the first item in the queue or the very next block as a string

hold should acutally work like this

no block in the hold queue
-block spawns
-hold block
-when you hold a block, it goes into the hold queue
-the next block spawns
-hold can't be used again until the block freezes

block in the hold queue
-block spawns
-hold block
-the formerly held block spawns
-the new blocks goes into the hold queue
-hold can't be used again until the block freezes

All changes implemented by Kevin Huang


==========================================================================================================================================================
8/20/19
Game Over

implementation plan

lock out
-a whole tetrimino locks down above the sky line
 
 the sky line i assume is the first two rows... so rows 1,2 or indexes 0,1
 
 if the block is frozen and all coordinates are inside.. trigger gameover

block out
-part of a newly-generated tetrimino is blocked due to an existing block in the matrix

 first, we check that a newly generated tetrimino will not be blocked,
  the new block's coordinates will be checked
  if any of those coordinates are occupied already, end game
  otherwise handle the block like normal

-gamestate.py
 -lock_out
  works exactly as described...

 -block_out
  works exactly as described


==========================================================================================================================================================
8/17/19
-gamestate.py
 -hard_drop_coords(self)
  -now defines hard_drop before returning it because sometimes the loop doesn't execute and before the hard_drop variable defined itself within the loop
 -ghost_printout(self)
  -before marking the spots on the board where the ghost block should occupy, we check to make sure that the minos of the current block is not occupying
   any of the spots where the ghost block lies
  -if a mino occupies a ghost spot, mino overrides silhouette, but player should still be able to see where their block lands...

All changes implemented by Kevin Huang.
 
=================================================================================================================================================================================
8/2/19
-gamestate.py
 -revamped spawn(self)
  -I didn't implement the spawn system correctly.
  -How it should work is that the game shuffles the 7 block types at the beginning
   and spawns the first block type. Once it does that, it pushes that block type to the end of
   the list and so on.

  -initializes a tetrimino
  -sets it to the first type in the queue
  -spawns the block on the board
  -adds the block to the list of existing blocks
  -deletes the first type and appends it to the queue

 -print_queue(self)
  -returns the next six blocks as a list
 
 -hold_queue(self)
  -returns a list of a currently held block
 
 -clear_hold_queue(self)
  -clears self.hold_queue

-tetrimino.py
 -overloaded __eq__(self, other)
  -Two Tetrimino objects are now equal to each other if they have identical coordinates
  -This will be helpful in implementing hold--specifically deleting 
   self.block from self.existing_blocks in gamestate.py


 -holding implementation
  -if the current block is not frozen and the hold queue is empty
   -the player can hold a block
   -this means that the block will be deleted from existing_blocks 
    and its type will be inside the hold_queue
   -the block that switched with the held block is the second type...
   -after the replacement block locks or freezes, the held block is the next to spawn... 

Accomplishments:
-Spawning now works as intended
-The queue can now be shown, so players can get an idea of the next 6 blocks
-Hold queue and holding block mechanic implemented

All changes implemented by Kevin Huang.

====================================================================================================================================================================
8/1/19
-added to the following modules:
 -tetrimino.py
  -revamped:
    o_block()
    -the top two blocks of an o mino now generate only in columns 5,6 or indexes 4,5
    i_block()
    -the most left block generates in row 21 or index 1 on columns 4,5,6,7, or indexes 3,4,5,6
    s,z,l,j,t_block()
    -the most left block(s) generate on column 4 or index 3

 -gamestate.py
 -revamped the following methods
  -spawn(self)
   -if the queue is more than length 0, the method will spawn a Tetrimino
   -the Tetrimino object will have the first type in the queue
   -the first element in the queue is deleted
   
   -if the queue is length 0
   -the block_types is reshuffled and the queue is set to a copy of the shuffle
   -the Tetrimno will have the first type in the queue
   -the first element in the queue is deleted

  -init(self)
   -GameState has two new attributes: block_types and queue
   -When an GameState object is initialized, this now happens
    -GameState will shuffle block_types in place and initialize queue to a copy of block_types

  -hard_drop_coords(self)
   -returns coordinates of the space that a block would hard drop in
  
  -ghost_printout(self)
   -modifies a copy of the board and uses the values returned by hard_drop_coords() to render the silhouette

Accomplishments:
Random "bag" system
Proper spawn orientation
Ghost block

All changes implemented by Kevin Huang.
=======================================================================================================================================================================
7/23/19
-added to the following modules:
 -gamestate.py
  -added the following methods:
   -existing_blocks_list(self)
    -returns a list of the Tetrimino objects in str form in self.existing blocks

   -block_coords_deleter(self, specific_block: [int, int])
    -deletes specific coordinates from a block object
    -implemented so the update function doesn't display tetrimino blocks that have been cleared away

   -block_deleter(self)
    -deletes Tetrimino objects if they have no more blocks on the board

   -mark_lines(self)
    -replaces "full" lines with a line of clear strings to mark rows for deletion

   -line_clear(self)
    -"clears" lines, then pushes the rows above those lines down

Accomplishments:
-matching has finally been implemented

Goals:
-implement spawning
-implement ghost block
-implement queue
-implement switching current block with blocks in the queue
-implement scoring system

All changes implemented by Kevin Huang   
 
========================================================================================================================================
7/18/19
-added to the following modules:
 -gamestate.py
  -added the following methods
   -hard_drop(self)
    -this makes the blocks immediately fall down as far as it can without occupying another block
    -fixed it such that the block freezes immediately once dropped
    
Goals:
-implement matching
 -I'm assuming all I have to do is check if a row or a list is full
 -Then, I show the matching.
 -Then, I empty the row.
 -Then I push the rows down. Hopefully, I don't do this recursively.
 -I'll do more research on this, but this seems rather straightforward to be honest.

-implement gameover
-implement the queue
-implement the scoring system

All changes made by Kevin Huang
==========================================================================================================================================
7/14/19
-revamped the following modules
 -gamestate.py
  -revamped the following methods:
   -rotation(self, value=0)
    -There was abnormal behavior. After one rotation, the block would split apart, despite the
     Tetrimino rotation methods working fine. What happened was that the if-elif-else logic
     wasn't quite correct as well as the phase-indexes not changing. That was weird.

     Basically, I should be careful using if-if-if vs. if-elif-elif.
     Also the phase-indexes were not changing which caused the code to apply the wrong rotation
     methods. I remedied this. Wall-kicking so far seems to be working properly.
   
  -valid_rotation(rotation_coords)
   -this might actually be a ton more efficient now since I use one for loop to check if the
    new rotation coordinates are valid. I itereate through a list comprehension which eliminates
    coordinates if they basically end up checking the block's original location

 -tetrimino.py
  -added the following methods:
   -index_changer(self, value)
    this basically took a block of code which was repeated throughout the several rotation 
    methods that I had made for each block. By putting this repeated block in a method and
    just simply using that method over and over, it reduced this module by about, I would hazard
    50 or so lines? Not shabby.

Goals:
-implement matching
 -I'm assuming all I have to do is check if a row or a list is full
 -Then, I show the matching.
 -Then, I empty the row.
 -Then I push the rows down. Hopefully, I don't do this recursively.
 -I'll do more research on this, but this seems rather straightforward to be honest.
 
-implement gameover
-implement queue
-implement scoring system

All changes made by Kevin Huang

===============================================================================================
7/10/19
fixed J-rotation...
J rotation algorithms turned out to be slightly off. Apparently, when a newly spawned J-block
was rotated left, it rotated into the 'R' orientation instead of the 'L' orientation, causing
it to exhibit abnormal behavior. By editing the code, we were able to catch this issue 

All changes made by Kevin Huang

==================================================================================================
7/9/19
-revamped the following methods in gamestate.py
 -rotation()
  -current_coords variable now uses the .copy() method on the blocks attribute of the current
   Tetrimino object stored in the current_block attribute of GameState
  
fixed rotation
I created a current_coords variable and a rotation_coords variable which respectively store
a dictionary of the coordinates before rotation and a dictionary of the coordinates after.
The rest of the rotation function didn't work because the two variables were assigned to 
the blocks attribute of the Tetrimino object. Since I didn't use .copy() for current_coords,
using current_coords at the end would cause it to reference the dict modified after rotation
instead of before like I intended.

All changes made by Kevin Huang

===============================================================================================
7/5/19
-revamped the following methods in gamestate.py
 -rotation now has two internal helper functions:
  -valid_rotation
   -makes sure that the indexes are within the bounds of the board
  -final_coords_generator
   -a dict comprehension that produces the new rotation

 -rotation function should ideally do the following:
  -the block current phase, type, and position is stored in variables
  -the block's new phase, type, and position are also stored
  -the block undergoes numerous checks
   -we check that the initial new coordinates are valid and unoccupied
   -if not, use the final_coords_generator to create a new set
   -ad nauseum until all tests have failed; if we reach this step, rotation fails completely

Things in progress:
For some reason, this rotation function is not getting the new coordinates
Since this is failing, we can't proceed using the new coordinates
The problem might lie in the rotation method in the Tetrimino class, but I'm not sure...
  
Things to do:
-fix rotation
-revamp testsuite.py
-implement matching
-implement gameover
-implement the queue

All changes made by Kevin Huang

==================================================================================================
6/20/19
-revamped the following methods in tetrimino.py
 -t_rotation()
  -now works properly; blocks don't scatter apart anymore...
 -i_rotation()
  -now works properly; blocks don't scatter apart anymore...
-added the following methods in GameState.py
 -test_spawn()
  -takes a type_str (str) which allows one to spawn a block of a specific type...

Things to do:
-make the indexes of the blocks... easily accessible for wall kicking purposes
-revamp testsuite.py to do more substantial and relevant tests
-implement matching
-implement gameover
-implement a queue of three blocks

All changes made by Kevin Huang

==============================================================================================
6/14/19
-added the following methods to GameState.py
 -i_rotation - hardcoded 
 -t_rotation
 -s_rotation
 -z_rotation
 -j_rotation
 -l_rotation
 -orientation - returns the current orientation of the block
-revamped the following methods
 -rotate
  -what it does now is that it takes either -1, 0, or 1
   -1 - indicates a 90 degree CCW turn
    1 - indicates a 90 degree CW turn
    0 - does nothing
  -this value is then passed through an if-else block which checks the current block type
   to determine whether which of the rotation methods above to use...

Things to add:
-fix the t block and i block rotations (the errors lie in the index shifting)
-make a better custom spawning method...
-make the indexes of the blocks... easily accessible for wall kicking purposes
-revamp testsuite.py to do more substantial tests
-implement matching/game over

All changes made by Kevin Huang

================================================================================================
6/12/19
-added new module:
 -testsuite.py
-wrote documentation for i block in GameState.py
-look into rotation matrices to avoid hardcoding every rotation in the game...
 -also consider reviewing Linear Algebra... Because that was embarassing...

-gamestate.py
 -revamped following methods to use methods in tetrimino...
  -move_right
  -move_left
  -gravity
  -nothing_below
  -nothing_right
  -nothing_left
   -all these new methods are using the new methods added to the Tetrimino class...

 -added following methods to Tetrimino() (tetrimino.py) for unittest/modularity
  -set_type
   -allows one to change the type of the block
  -rotate
   -allows one to go between the different rotational phases
  -position_blocks
   -allows one to position blocks using block1 as a reference
  -fall_down
   -adds 1 to the row index of each sub-block
  -move_left
   -subtracts 1 from the col index of each sub-block
  -move_right
   -adds 1 to the col index of each sub_block
  -indexes_below
   -generates a list of indexes directly below each sub-block (that doesn't refer to a sub-block)
  -indexes_right
   -ditto
  -indexes_left
   -ditto


Things to add:
-Finish writing notes for every rotation combination...
-Read up on rotational matrices...
-Revamp unit tests for those different rotation possibilities
-Create appropriate helper methods or functions as needed to implement a rotation algorithm

All changes made by Kevin Huang

=======================================================================================
5/26/19
-gamestate.py
 -added following methods in GameState class:
  -nothing_below
   -returns bool that detects whether spaces below are empty
    now modified such that it detects spaces below the bottom blocks 
    instead of all blocks in the current tetrimino
  -nothing_right
   -similar principle as nothing_below
  -nothing_left
   -ditto
  -rotation
   -still need to conceptualize it...

Things to add:
 -implement a simple rotation alogrithm
  -write down notes on Tetris's actual implementation
 -a module to unit test Tetris

All changes made by Kevin Huang
  
==================================================================================
5/15/19
-gamestate.py
 -started progress on the nothing_below method
 -nothing_below will return a bool that detects whether the spaces
  below the current tetrimino is empty. if empty, the tetrimino can
  fall into those squares; otherwise, it lands, then freezes...
 -nothing_right and nothing_left will work similarily...
 
Things to add:
 -implementing rotation
 -changing gravity so that the current tetrimino dosn't override existing
  blocks
 -perhaps change possible to a method that returns a bool and rewrite it
  so that it's more readable and concise...

All changes made by Kevin Huang
 
======================================================================================
5/13/19
-gamestate.py
 -added following attributes to GameState Class:
  -existing_blocks
   -is a list of all block objects that have existed...
   -implemented so previous blocks wouldn't be overwritten...
 -modified gravity method to incorporate freezing and landing mechanics
-tetrimino.py
 -added following attributes to the Tetrimino:
  -frozen - activates a tick after landing (only works with bottom for now)
  -landed - activates upon landing (only works with the bottom for now)

Things to add:
 -implementing rotation
 -modifying the movement such that the current tetrimino doesn't occupy 
  an space already occupied by an existing block...

All changes made by Kevin Huang

=======================================================================================
5/10/19
-gamestate.py
 -added the following methods in GameState class:
  -move_right()
   -moves each block in an Tetrimino object 1 column right
  -move_left()
   -moves each block in a Tetrimion object 1 column left
  -gravity()
   -moves each block in an Tetrimino object 1 row down...
  -board_update()
   -updates board by wiping every index that the current Tetrimino object
    isn't in (this must be changed...)

  -updated the following methods in GameState class:
   -spawn()
    -does not update board anymore, all it does is initialize
     the block attribute to an Tetrimino object.
 
 -created a if __name__ == '__main__' block for testing purposes...

Things to add:
-board_update must be modified such that it doesn't "destroy" an existing block 
 when a new block is added
-implementing rotation
-modifying the movement such that the current tetrimino doesn't occupy 
 an space already occupied by an existing block...

All changes made by Kevin Huang

===========================================================================================
5/8/2019
-tetrimino.py
 -added the following methods to Tetrimino class:
  o_block() - creates coordinates and reinitializes block(1-4) attributes
              to those coordinates
  i_block() 
  t_block()
  l_block()
  j_block()
  s_block()
  z_block()
  spawn() - checks block type before using the methods above to reinitialize 
            block1, block2, block3, block4 attributes to coordinates

-gamestate.py
 -added to the following methods in GameState class:
  -printout()
   -now returns a string representation of the board using a nested list comprehension
  -spawn()
   -now mutates the list stored in the board attribute with a newly spawned block...
 
Things to add:
-Adding a unittest module 
-Perhaps make the spawn method in GameState some sort of general update method
 -for example, mutating the GameState's board attribute based on the 
  current values of the Tetromino's block1, block2 attributes 
-Implementing side-to-side movement
-Implementing gravity
-Maybe rotation

All changes made by Kevin Huang

===============================================================================================
5/7/2019
-added helper.py
 -created copyright()
  this quickly prints copyright info

-added gamestate.py
 -created GameState class
 -GameState currently has one attribute: 
  board (the array storing the state of the game field)
 -printout method
  currently prints board directly to console
 -board config
  allows changing of amount of rows or columns without 
  changing global constants ROWS or COLUMNS

-added tetrimino.py
 -created Tetrinimo class
 
Things to add:
-Some way of handling the position of a tetrimino...
-Putting a tetrimino inside the board...
-Changing printout so it returns a string which can be checked by unit testing
-Adding a unit test module to handle basic spawning

All changes made by Kevin Huang


