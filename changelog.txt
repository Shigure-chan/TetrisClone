6/20/19
-revamped the following methods in Tetrimino.py
 -t_rotation()
  -now works properly; blocks don't scatter apart anymore...
 -i_rotation()
  -now works properly; blocks don't scatter apart anymore...
-added the following methods in GameState.py
 -test_spawn()
  -takes a type_str (str) which allows one to spawn a block of a specific type...

Things to do:
-make the indexes of the blocks... easily accessible for wall kicking purposes
-revamp testsuite.py to do more substantial and relevant tests
-implement matching
-implement gameover
-implement a queue of three blocks


==============================================================================================
6/14/19
-added the following methods to GameState.py
 -i_rotation - hardcoded 
 -t_rotation
 -s_rotation
 -z_rotation
 -j_rotation
 -l_rotation
 -orientation - returns the current orientation of the block
-revamped the following methods
 -rotate
  -what it does now is that it takes either -1, 0, or 1
   -1 - indicates a 90 degree CCW turn
    1 - indicates a 90 degree CW turn
    0 - does nothing
  -this value is then passed through an if-else block which checks the current block type
   to determine whether which of the rotation methods above to use...

Things to add:
-fix the t block and i block rotations (the errors lie in the index shifting)
-make a better custom spawning method...
-make the indexes of the blocks... easily accessible for wall kicking purposes
-revamp testsuite.py to do more substantial tests
-implement matching/game over

================================================================================================
6/12/19
-added new module:
 -testsuite.py
-wrote documentation for i block in GameState.py
-look into rotation matrices to avoid hardcoding every rotation in the game...
 -also consider reviewing Linear Algebra... Because that was embarassing...

-gamestate.py
 -revamped following methods to use methods in tetrimino...
  -move_right
  -move_left
  -gravity
  -nothing_below
  -nothing_right
  -nothing_left
   -all these new methods are using the new methods added to the Tetrimino class...

 -added following methods to Tetrimino() (tetrimino.py) for unittest/modularity
  -set_type
   -allows one to change the type of the block
  -rotate
   -allows one to go between the different rotational phases
  -position_blocks
   -allows one to position blocks using block1 as a reference
  -fall_down
   -adds 1 to the row index of each sub-block
  -move_left
   -subtracts 1 from the col index of each sub-block
  -move_right
   -adds 1 to the col index of each sub_block
  -indexes_below
   -generates a list of indexes directly below each sub-block (that doesn't refer to a sub-block)
  -indexes_right
   -ditto
  -indexes_left
   -ditto


Things to add:
-Finish writing notes for every rotation combination...
-Read up on rotational matrices...
-Revamp unit tests for those different rotation possibilities
-Create appropriate helper methods or functions as needed to implement a rotation algorithm



=======================================================================================
5/26/19
-gamestate.py
 -added following methods in GameState class:
  -nothing_below
   -returns bool that detects whether spaces below are empty
    now modified such that it detects spaces below the bottom blocks 
    instead of all blocks in the current tetrimino
  -nothing_right
   -similar principle as nothing_below
  -nothing_left
   -ditto
  -rotation
   -still need to conceptualize it...

Things to add:
 -implement a simple rotation alogrithm
  -write down notes on Tetris's actual implementation
 -a module to unit test Tetris

All changes made by Kevin Huang
  
==================================================================================
5/15/19
-gamestate.py
 -started progress on the nothing_below method
 -nothing_below will return a bool that detects whether the spaces
  below the current tetrimino is empty. if empty, the tetrimino can
  fall into those squares; otherwise, it lands, then freezes...
 -nothing_right and nothing_left will work similarily...
 
Things to add:
 -implementing rotation
 -changing gravity so that the current tetrimino dosn't override existing
  blocks
 -perhaps change possible to a method that returns a bool and rewrite it
  so that it's more readable and concise...

All changes made by Kevin Huang
 
======================================================================================
5/13/19
-gamestate.py
 -added following attributes to GameState Class:
  -existing_blocks
   -is a list of all block objects that have existed...
   -implemented so previous blocks wouldn't be overwritten...
 -modified gravity method to incorporate freezing and landing mechanics
-tetrimino.py
 -added following attributes to the Tetrimino:
  -frozen - activates a tick after landing (only works with bottom for now)
  -landed - activates upon landing (only works with the bottom for now)

Things to add:
 -implementing rotation
 -modifying the movement such that the current tetrimino doesn't occupy 
  an space already occupied by an existing block...

All changes made by Kevin Huang

=======================================================================================
5/10/19
-gamestate.py
 -added the following methods in GameState class:
  -move_right()
   -moves each block in an Tetrimino object 1 column right
  -move_left()
   -moves each block in a Tetrimion object 1 column left
  -gravity()
   -moves each block in an Tetrimino object 1 row down...
  -board_update()
   -updates board by wiping every index that the current Tetrimino object
    isn't in (this must be changed...)

  -updated the following methods in GameState class:
   -spawn()
    -does not update board anymore, all it does is initialize
     the block attribute to an Tetrimino object.
 
 -created a if __name__ == '__main__' block for testing purposes...

Things to add:
-board_update must be modified such that it doesn't "destroy" an existing block 
 when a new block is added
-implementing rotation
-modifying the movement such that the current tetrimino doesn't occupy 
 an space already occupied by an existing block...

All changes made by Kevin Huang

===========================================================================================
5/8/2019
-tetrimino.py
 -added the following methods to Tetrimino class:
  o_block() - creates coordinates and reinitializes block(1-4) attributes
              to those coordinates
  i_block() 
  t_block()
  l_block()
  j_block()
  s_block()
  z_block()
  spawn() - checks block type before using the methods above to reinitialize 
            block1, block2, block3, block4 attributes to coordinates

-gamestate.py
 -added to the following methods in GameState class:
  -printout()
   -now returns a string representation of the board using a nested list comprehension
  -spawn()
   -now mutates the list stored in the board attribute with a newly spawned block...
 
Things to add:
-Adding a unittest module 
-Perhaps make the spawn method in GameState some sort of general update method
 -for example, mutating the GameState's board attribute based on the 
  current values of the Tetromino's block1, block2 attributes 
-Implementing side-to-side movement
-Implementing gravity
-Maybe rotation

All changes made by Kevin Huang

===============================================================================================
5/7/2019
-added helper.py
 -created copyright()
  this quickly prints copyright info

-added gamestate.py
 -created GameState class
 -GameState currently has one attribute: 
  board (the array storing the state of the game field)
 -printout method
  currently prints board directly to console
 -board config
  allows changing of amount of rows or columns without 
  changing global constants ROWS or COLUMNS

-added tetrimino.py
 -created Tetrinimo class
 
Things to add:
-Some way of handling the position of a tetrimino...
-Putting a tetrimino inside the board...
-Changing printout so it returns a string which can be checked by unit testing
-Adding a unit test module to handle basic spawning

All changes made by Kevin Huang


